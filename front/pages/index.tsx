import type { NextPage } from 'next'
import Head from 'next/head'

import { useEffect, useState } from 'react'
import { Container, Form, Button} from 'react-bootstrap'
import { Controller, useForm } from "react-hook-form";
import Box from '../models/box';
import TransactionService from '../services/transaction';
import Select, { StylesConfig } from 'react-select';
import Usuario from '../models/usuario'
import Cuenta from '../models/cuenta';


const Index: NextPage = () => {

  const [cuenta, setCuenta] = useState<boolean>(true);
  const { register: regConCuenta, handleSubmit: handleSubmitConCuenta, formState: { errors : errorsConCuenta} } = useForm();
  const { control,register: regSinCuenta, handleSubmit: handleSubmitSinCuenta, formState: { errors : errorsSinCuenta} } = useForm();
  const [generos, setGeneros] = useState<Array<Box>>([]);

  // busqueda actores
  const [searchActor, setSearchActor] = useState<string|null>(null);
  const [actores, setActores] = useState<Array<Box>>([]);

  // busqueda directores
  const [searchDir, setSearchDir] = useState<string|null>(null);
  const [dir, setDir] = useState<Array<Box>>([]);

  // busqueda peliculas
  const [searchPeli, setSearchPeli] = useState<string|null>(null);
  const [peli, setPeli] = useState<Array<Box>>([]);

  // chequeo de contraseñas
  const [password1, setPassword1] = useState<string>("");
  const [password2, setPassword2] = useState<string>("");

	useEffect(() => {
		// remueve la barra de navegacion del DOM en la pantalla de iniciar sesión
		let nav : HTMLElement|null= document.querySelector("#topnav");
		if (!!nav) {
			nav.remove();	
		}
    if (generos.length==0) {
      TransactionService.getGeneros().then((resp) =>{
        setGeneros(resp.data);
      }).catch((error)=>{
        console.log(error);
      });
    }
	}, []);
	
  useEffect(() => {
    if (searchActor!=null) {
      // busca los actores desde la api
      TransactionService.getPersonas(searchActor).then((resp) =>{
          setActores(resp.data);
        }).catch((error)=>{
          console.log(error);
        });
    }
  }, [searchActor]);
  
  useEffect(() => {
    if (searchDir!=null) {
      // busca los directores desde la api
      TransactionService.getPersonas(searchDir).then((resp) =>{
          setDir(resp.data);
        }).catch((error)=>{
          console.log(error);
        });
    }
  }, [searchDir]);
  
  useEffect(() => {
    if (searchPeli!=null) {
      // busca las peliculas desde la api
      TransactionService.getPeliculas(searchPeli).then((resp) =>{
          setPeli(resp.data);
        }).catch((error)=>{
          console.log(error);
        });
    }
  }, [searchPeli]);
  
  const onSubmitSinCuenta = (data: any) => {
    // se integran el contenido de la dupla para mandarse en un solo parametro al back, formato: xxxx#yyyyy
    data.genero_favorito = generos.map(x => x.id+"#"+ x.name).find(x => x.split("#")[0] == data.genero_favorito);
    if (!!data.actor_favorito) {
      data.actor_favorito = data.actor_favorito.value + "#" + data.actor_favorito.label ;
    }
    if (!!data.dir_favorito) {
      data.dir_favorito = data.dir_favorito.value + "#" + data.dir_favorito.label ;
    }
    if (!!data.peli_favorita) {
      data.peli_favorita = data.peli_favorita.value + "#" + data.peli_favorita.label ;
    }
    let usuario : Usuario = {
      nombre : data.nombre,
      apellido1: data.apellido1,
      apellido2: data.apellido2,
      correo: data.correo,
      alias: data.alias,
      edad: data.edad,
      genero: data.genero,
      password: data.password1,
      dir_favorito: data.dir_favorito,
      actor_favorito: data.actor_favorito,
      genero_favorito: data.genero_favorito,
      peli_favorita: data.peli_favorita
    };
    console.log("usuario nuevo:",usuario);
    console.log("reg", errorsSinCuenta);
  }


  const onSubmitConCuenta = (data: any) => {
    let cuenta : Cuenta = {
      alias_correo: data.alias_correo,
      password: data.correo
    }
    console.log("data",cuenta);
  }

  return (
    <>
      <Head>
        <title>Inicio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <div id='canvas'></div>

      <Container id='form-container' className='p-5'>
      
        <h3>Bienvenido!</h3>
          { cuenta &&
            <p style={{paddingBottom:"20px"}}>
              Inicie sesión si ya tiene una cuenta, o <span className='enlace' onClick={() => setCuenta(!cuenta)}>cree una nueva</span>.
            </p>
          }
          { !cuenta &&
            <p style={{paddingBottom:"20px"}}>
              LLene sus datos para crear su cuenta, o <span className='enlace' onClick={() => setCuenta(!cuenta)}>inicie sesión </span>
              si ya tiene una.
            </p>
          }

        { cuenta &&
          <Form className='forma-iniciar-sesion mt-4'  onSubmit={handleSubmitConCuenta(onSubmitConCuenta)}>


              <Form.Group className="mb-3 sesion-nombre" controlId="sesion-nombre">
                <Form.Label>Alias o correo electronico</Form.Label>
                <Form.Control type="text" style={{width:"280px"}}
                  {...regConCuenta("alias_correo", { required: true})}
                />
              </Form.Group>

              <Form.Group className="mb-3 sesion-password" controlId="sesion-password">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control type="password" style={{width:"280px"}}
                  {...regConCuenta("password", { required: true})}
                />
              </Form.Group>

              <Button  type="submit">Enviar</Button>

          </Form>
        }

        { !cuenta &&
          <Form className='mt-4' onSubmit={handleSubmitSinCuenta(onSubmitSinCuenta)}>
            <h4 className='my-4'>Datos de la cuenta</h4>
            <div className='forma-crear-cuenta'>

              <Form.Group className="mb-3 input-sincuenta forma-nombre" controlId="forma-nombre">
                <Form.Label>Nombre de usuario</Form.Label>
                <Form.Control type="text" style={{width:"280px"}}
                  {...regSinCuenta("nombre", { required: true})}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta apellido1" controlId="apellido1">
                <Form.Label>Apellido Paterno</Form.Label>
                <Form.Control type="text" style={{width:"280px"}}
                  {...regSinCuenta("apellido1", { required: true})}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta apellido2" controlId="apellido2">
                <Form.Label>Apellido Materno</Form.Label>
                <Form.Control type="text" style={{width:"280px"}}
                  {...regSinCuenta("apellido2")}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-correo" controlId="forma-correo">
                <Form.Label>Correo</Form.Label>
                <Form.Control type="email" style={{width:"280px"}}
                  {...regSinCuenta("correo", { required: true})}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-alias" controlId="forma-alias">
                <Form.Label>Alias</Form.Label>
                <Form.Control type="text" style={{width:"280px"}}
                  {...regSinCuenta("alias", { required: true})}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-edad" controlId="forma-edad">
                <Form.Label>Edad</Form.Label>
                <Form.Control type="number" style={{width:"280px"}} step="1" min="0" max="99"
                  {...regSinCuenta("edad")}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-edad" controlId="forma-genero">
                <Form.Label>Género</Form.Label>
                <Form.Select aria-label="Default select example" style={{width:"280px"}}
                  {...regSinCuenta("genero")}
                >
                  <option>Selecciona una opción</option>
                  <option value="F">Femenino</option>
                  <option value="M">Masculino</option>
                </Form.Select>
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-password1" controlId="forma-password1">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control type="password" style={{width:"280px", 
                  border: (password1!=password2 && !!password1 && !!password2?"4px solid #ff3333":"")}} 
                  {...regSinCuenta("password1", { required: true})}
                  onKeyUp={(data: any)=> {setPassword1(data.target.value)}}
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta forma-password2" controlId="forma-password2">
                <Form.Label>Confirmar Contraseña</Form.Label>
                <Form.Control type="password" style={{width:"280px",
                  border: (password1!=password2 && !!password1 && !!password2?"4px solid #ff3333":"")}} 
                  {...regSinCuenta("password2", { required: true})}
                  onKeyUp={(data: any)=> {setPassword2(data.target.value)}}
                />
              </Form.Group>
            </div>

            <hr />

            <h4 className='my-4'>Tus Preferencias cinéfilas</h4>

            <div className='forma-crear-cuenta'>

              <Form.Group className="mb-3 input-sincuenta pref-genero" controlId="pref-genero">
                <Form.Label>Selecciona tú género favorito</Form.Label>
                <Form.Select aria-label="Default select example" style={{width:"280px"}}
                  {...regSinCuenta("genero_favorito", { required: true})}
                >
                  <option>Selecciona una opción</option>
                  {
                    generos.map((genero)=>{
                      return <option key={genero.id} value={genero.id}>{genero.name}</option>
                    })
                  }
                </Form.Select>
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta pref-genero" controlId="pref-genero">
                <Form.Label>Selecciona tú actor favorito</Form.Label>
                <Controller
                  name="actor_favorito"
                  control={control}
                  render={({ field }) => 
                    <Select 
                      {...field} 
                      onInputChange={(value)=> setSearchActor(value.replaceAll(/\s+/g,"+"))}
                      className="select-react"
                      isSearchable={true}
                      options=
                      {
                        actores.map((persona: Box) =>{
                          return {label:persona.name, value: persona.id}
                        })
                      }
                      styles={{
                        option: (provided, state) => ({
                          ...provided,
                          borderBottom: '1px dotted pink',
                          color: state.isSelected ? 'white' : 'black',
                          padding: 6,
                        })
                      }}
                    />
                  }
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta pref-genero" controlId="pref-genero">
                <Form.Label>Selecciona tú director favorito</Form.Label>
                <Controller
                  name="dir_favorito"
                  control={control}
                  render={({ field }) => 
                    <Select 
                      {...field} 
                      className="select-react"
                      onInputChange={(value)=> setSearchDir(value.replaceAll(/\s+/g,"+"))}
                      isSearchable={true}
                      options=
                      {
                        dir.map((persona: Box) =>{
                          return {label:persona.name, value: persona.id}
                        })
                      }
                      styles={{
                        option: (provided, state) => ({
                          ...provided,
                          borderBottom: '1px dotted pink',
                          color: state.isSelected ? 'white' : 'black',
                          padding: 6,
                        })
                      }}
                    />
                  }
                />
              </Form.Group>

              <Form.Group className="mb-3 input-sincuenta pref-genero" controlId="pref-genero">
                <Form.Label>Selecciona tú Pelicula favorito</Form.Label>
                <Controller
                  name="peli_favorita"
                  control={control}
                  render={({ field }) => 
                    <Select 
                      {...field} 
                      className="select-react"
                      onInputChange={(value)=> setSearchPeli(value.replaceAll(/\s+/g,"+"))}
                      isSearchable={true}
                      options=
                      {
                        peli.map((pelicula: Box) =>{
                          return {label:pelicula.title, value: pelicula.id}
                        })
                      }
                      styles={{
                        option: (provided, state) => ({
                          ...provided,
                          borderBottom: '1px dotted pink',
                          color: state.isSelected ? 'white' : 'black',
                          padding: 6,
                        })
                      }}
                    />
                  }
                />
              </Form.Group>

            </div>

            <Button  className='my-4' type="submit" disabled={!(!!errorsSinCuenta && Object.keys(errorsSinCuenta).length == 0 && password1==password2)}>Enviar</Button>

          </Form>
        }

      </Container>

    </>
  )
}

export default Index;
